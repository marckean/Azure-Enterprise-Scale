#Requires -Modules Az.Accounts, Az.Resources, Az.Network, Az.Compute

<#
.SYNOPSIS
    Generate comprehensive HTML report from Virtual Network analysis CSV files

.DESCRIPTION
    This script reads the CSV files generated by the VNet analysis and creates a beautiful,
    interactive HTML report with tables, charts, and executive summary.

.PARAMETER InputPath
    Path where the CSV files are located.

.PARAMETER OutputPath
    Path where the HTML report will be saved. If not specified, uses InputPath.

.EXAMPLE
    .\Generate-VNetAnalysisReport.ps1 -InputPath "C:\Azure-Migration-Analysis"
#>

param(
    [Parameter(Mandatory = $true)]
    [string]$InputPath,
    
    [Parameter(Mandatory = $false)]
    [string]$OutputPath = $InputPath
)

# Check if input path exists
if (-not (Test-Path $InputPath)) {
    Write-Error "Input path $InputPath does not exist"
    exit 1
}

# Find the most recent CSV files
$vnetFile = Get-ChildItem -Path $InputPath -Name "VNet-Complete-Inventory-*.csv" | Sort-Object CreationTime -Descending | Select-Object -First 1
$vmFile = Get-ChildItem -Path $InputPath -Name "Connected-VMs-Complete-*.csv" | Sort-Object CreationTime -Descending | Select-Object -First 1
$deviceFile = Get-ChildItem -Path $InputPath -Name "Connected-Devices-Complete-*.csv" | Sort-Object CreationTime -Descending | Select-Object -First 1
$subnetFile = Get-ChildItem -Path $InputPath -Name "Subnet-Analysis-Complete-*.csv" | Sort-Object CreationTime -Descending | Select-Object -First 1

if (-not $vnetFile -or -not $vmFile -or -not $deviceFile -or -not $subnetFile) {
    Write-Error "Could not find all required CSV files in $InputPath"
    Write-Host "Looking for files matching:"
    Write-Host "- VNet-Complete-Inventory-*.csv"
    Write-Host "- Connected-VMs-Complete-*.csv"
    Write-Host "- Connected-Devices-Complete-*.csv"
    Write-Host "- Subnet-Analysis-Complete-*.csv"
    exit 1
}

Write-Host "Found CSV files:" -ForegroundColor Green
Write-Host "- VNet Inventory: $vnetFile" -ForegroundColor White
Write-Host "- VM Inventory: $vmFile" -ForegroundColor White
Write-Host "- Device Inventory: $deviceFile" -ForegroundColor White
Write-Host "- Subnet Analysis: $subnetFile" -ForegroundColor White

# Import CSV data
Write-Host "`nImporting CSV data..." -ForegroundColor Green
$vnets = Import-Csv -Path (Join-Path $InputPath $vnetFile)
$vms = Import-Csv -Path (Join-Path $InputPath $vmFile)
$devices = Import-Csv -Path (Join-Path $InputPath $deviceFile)
$subnets = Import-Csv -Path (Join-Path $InputPath $subnetFile)

# Generate timestamp for report
$timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
$reportDate = Get-Date -Format "MMMM dd, yyyy 'at' HH:mm"

# Calculate summary statistics
$totalVNets = $vnets.Count
$totalVMs = $vms.Count
$totalDevices = $devices.Count
$totalSubnets = $subnets.Count

$prodVNets = ($vnets | Where-Object { $_.WorkloadType -eq "Production" }).Count
$nonProdVNets = ($vnets | Where-Object { $_.WorkloadType -eq "Non-Production" }).Count
$unknownVNets = ($vnets | Where-Object { $_.WorkloadType -eq "Unknown" }).Count

$prodVMs = ($vms | Where-Object { $_.WorkloadType -eq "Production" }).Count
$nonProdVMs = ($vms | Where-Object { $_.WorkloadType -eq "Non-Production" }).Count
$unknownVMs = ($vms | Where-Object { $_.WorkloadType -eq "Unknown" }).Count

# Subscription analysis
$subscriptionStats = $vnets | Group-Object SubscriptionName | ForEach-Object {
    $subVNets = $_.Group
    $subVMs = $vms | Where-Object { $_.VNetSubscriptionName -eq $_.Name }
    
    [PSCustomObject]@{
        SubscriptionName = $_.Name
        VNetCount = $subVNets.Count
        VMCount = $subVMs.Count
        ProductionVNets = ($subVNets | Where-Object { $_.WorkloadType -eq "Production" }).Count
        NonProductionVNets = ($subVNets | Where-Object { $_.WorkloadType -eq "Non-Production" }).Count
        UnknownVNets = ($subVNets | Where-Object { $_.WorkloadType -eq "Unknown" }).Count
    }
} | Sort-Object VMCount -Descending

# VM Size analysis
$vmSizeStats = $vms | Group-Object VMSize | ForEach-Object {
    [PSCustomObject]@{
        VMSize = $_.Name
        Count = $_.Count
        Percentage = [math]::Round(($_.Count / $totalVMs * 100), 1)
    }
} | Sort-Object Count -Descending

# OS Type analysis
$osTypeStats = $vms | Group-Object OSType | ForEach-Object {
    [PSCustomObject]@{
        OSType = $_.Name
        Count = $_.Count
        Percentage = [math]::Round(($_.Count / $totalVMs * 100), 1)
    }
} | Sort-Object Count -Descending

# Function to convert objects to HTML table
function ConvertTo-HTMLTable {
    param(
        [Parameter(Mandatory=$true)]
        [object[]]$Data,
        [Parameter(Mandatory=$true)]
        [string]$TableId,
        [Parameter(Mandatory=$false)]
        [string]$TableClass = "display compact",
        [Parameter(Mandatory=$false)]
        [int]$MaxRows = 1000
    )
    
    if ($Data.Count -eq 0) {
        return "<p>No data available</p>"
    }
    
    $limitedData = $Data | Select-Object -First $MaxRows
    $headers = $limitedData[0].PSObject.Properties.Name
    
    $html = "<table id='$TableId' class='$TableClass'>"
    $html += "<thead><tr>"
    foreach ($header in $headers) {
        $html += "<th>$header</th>"
    }
    $html += "</tr></thead><tbody>"
    
    foreach ($row in $limitedData) {
        $html += "<tr>"
        foreach ($header in $headers) {
            $value = $row.$header
            if ($null -eq $value) { $value = "" }
            $html += "<td>$([System.Web.HttpUtility]::HtmlEncode($value))</td>"
        }
        $html += "</tr>"
    }
    
    $html += "</tbody></table>"
    
    if ($Data.Count -gt $MaxRows) {
        $html += "<p class='note'><em>Showing first $MaxRows of $($Data.Count) records. Use search and filters to find specific items.</em></p>"
    }
    
    return $html
}

# Create HTML report
$htmlContent = @"
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Azure Virtual Network Analysis Report</title>
    
    <!-- DataTables CSS -->
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.13.7/css/jquery.dataTables.min.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/buttons/2.4.2/css/buttons.dataTables.min.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/responsive/2.5.0/css/responsive.dataTables.min.css">
    
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
            color: #333;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(135deg, #0078d4, #005a9e);
            color: white;
            padding: 30px;
            text-align: center;
        }
        
        .header h1 {
            margin: 0;
            font-size: 2.5em;
            font-weight: 300;
        }
        
        .header p {
            margin: 10px 0 0 0;
            font-size: 1.1em;
            opacity: 0.9;
        }
        
        .content {
            padding: 30px;
        }
        
        .executive-summary {
            background: linear-gradient(135deg, #e3f2fd, #f8f9fa);
            padding: 25px;
            border-radius: 8px;
            margin-bottom: 30px;
            border-left: 5px solid #0078d4;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        
        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            border-top: 4px solid #0078d4;
        }
        
        .stat-card h3 {
            margin: 0 0 10px 0;
            font-size: 2.2em;
            color: #0078d4;
            font-weight: bold;
        }
        
        .stat-card p {
            margin: 0;
            color: #666;
            font-weight: 500;
        }
        
        .section {
            margin: 40px 0;
        }
        
        .section h2 {
            color: #0078d4;
            border-bottom: 2px solid #0078d4;
            padding-bottom: 10px;
            font-size: 1.8em;
        }
        
        .charts-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 30px;
            margin: 30px 0;
        }
        
        .chart-container {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        .chart-container h3 {
            margin-top: 0;
            color: #333;
            text-align: center;
        }
        
        .chart-canvas {
            max-height: 300px;
        }
        
        table.dataTable {
            border-collapse: collapse;
            margin: 20px 0;
        }
        
        table.dataTable th,
        table.dataTable td {
            padding: 12px 8px;
            border-bottom: 1px solid #ddd;
        }
        
        table.dataTable th {
            background-color: #f8f9fa;
            font-weight: 600;
            color: #333;
        }
        
        table.dataTable tbody tr:hover {
            background-color: #f5f5f5;
        }
        
        .workload-production {
            color: #d32f2f;
            font-weight: bold;
        }
        
        .workload-nonproduction {
            color: #388e3c;
            font-weight: bold;
        }
        
        .workload-unknown {
            color: #f57c00;
            font-weight: bold;
        }
        
        .note {
            color: #666;
            font-style: italic;
            margin-top: 10px;
        }
        
        .migration-phases {
            background: #fff3e0;
            padding: 20px;
            border-radius: 8px;
            border-left: 5px solid #ff9800;
            margin: 20px 0;
        }
        
        .migration-phases h3 {
            color: #e65100;
            margin-top: 0;
        }
        
        .phase {
            margin: 15px 0;
            padding: 10px;
            background: white;
            border-radius: 4px;
            border-left: 3px solid #ff9800;
        }
        
        .phase h4 {
            margin: 0 0 5px 0;
            color: #e65100;
        }
        
        .button-container {
            text-align: center;
            margin: 30px 0;
        }
        
        .export-btn {
            background: #0078d4;
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 16px;
            margin: 0 10px;
            transition: background-color 0.3s;
        }
        
        .export-btn:hover {
            background: #005a9e;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🌐 Azure Virtual Network Analysis Report</h1>
            <p>Virtual WAN Migration Planning Report</p>
            <p>Generated on $reportDate</p>
        </div>
        
        <div class="content">
            <!-- Executive Summary -->
            <div class="executive-summary">
                <h2>📊 Executive Summary</h2>
                <p>This comprehensive analysis covers all virtual networks and connected resources in the <strong>australiaeast</strong> region across your Azure tenant. The analysis identified <strong>$totalVNets virtual networks</strong> with <strong>$totalVMs virtual machines</strong> and <strong>$totalDevices additional network devices</strong>.</p>
                
                <div class="stats-grid">
                    <div class="stat-card">
                        <h3>$totalVNets</h3>
                        <p>Virtual Networks</p>
                    </div>
                    <div class="stat-card">
                        <h3>$totalVMs</h3>
                        <p>Virtual Machines</p>
                    </div>
                    <div class="stat-card">
                        <h3>$totalDevices</h3>
                        <p>Network Devices</p>
                    </div>
                    <div class="stat-card">
                        <h3>$totalSubnets</h3>
                        <p>Subnets Analyzed</p>
                    </div>
                </div>
            </div>
            
            <!-- Migration Planning -->
            <div class="migration-phases">
                <h3>🚀 Recommended Migration Phases</h3>
                
                <div class="phase">
                    <h4>Phase 1: Non-Production Workloads</h4>
                    <p><strong>$nonProdVNets VNets</strong> identified | <strong>$nonProdVMs VMs</strong> | Risk Level: <span style="color: green;">Low</span></p>
                    <p>Start with non-production workloads to validate Virtual WAN connectivity and performance.</p>
                </div>
                
                <div class="phase">
                    <h4>Phase 2: Unknown Classification Review</h4>
                    <p><strong>$unknownVNets VNets</strong> identified | <strong>$unknownVMs VMs</strong> | Risk Level: <span style="color: orange;">Medium</span></p>
                    <p>Review and classify these workloads with application teams before migration.</p>
                </div>
                
                <div class="phase">
                    <h4>Phase 3: Production Workloads</h4>
                    <p><strong>$prodVNets VNets</strong> identified | <strong>$prodVMs VMs</strong> | Risk Level: <span style="color: red;">High</span></p>
                    <p>Migrate production workloads after successful validation in previous phases.</p>
                </div>
            </div>
            
            <!-- Charts Section -->
            <div class="section">
                <h2>📈 Workload Distribution Analysis</h2>
                <div class="charts-container">
                    <div class="chart-container">
                        <h3>Virtual Networks by Workload Type</h3>
                        <canvas id="vnetChart" class="chart-canvas"></canvas>
                    </div>
                    <div class="chart-container">
                        <h3>Virtual Machines by Workload Type</h3>
                        <canvas id="vmChart" class="chart-canvas"></canvas>
                    </div>
                    <div class="chart-container">
                        <h3>Top VM Sizes</h3>
                        <canvas id="vmSizeChart" class="chart-canvas"></canvas>
                    </div>
                    <div class="chart-container">
                        <h3>Operating System Distribution</h3>
                        <canvas id="osChart" class="chart-canvas"></canvas>
                    </div>
                </div>
            </div>
            
            <!-- Subscription Analysis -->
            <div class="section">
                <h2>🏢 Subscription Analysis</h2>
                <p>Analysis of virtual networks and virtual machines across all subscriptions in your tenant.</p>
                $(ConvertTo-HTMLTable -Data $subscriptionStats -TableId "subscriptionTable")
            </div>
            
            <!-- Virtual Networks Table -->
            <div class="section">
                <h2>🌐 Virtual Networks Inventory</h2>
                <p>Complete inventory of all virtual networks in the australiaeast region. Use the search and filter capabilities to find specific networks.</p>
                $(ConvertTo-HTMLTable -Data $vnets -TableId "vnetTable")
            </div>
            
            <!-- Virtual Machines Table -->
            <div class="section">
                <h2>💻 Connected Virtual Machines</h2>
                <p>All virtual machines connected to the virtual networks, including cross-subscription and cross-resource group connections. This data is critical for application team mapping.</p>
                $(ConvertTo-HTMLTable -Data $vms -TableId "vmTable")
            </div>
            
            <!-- Network Devices Table -->
            <div class="section">
                <h2>🔧 Connected Network Devices</h2>
                <p>Non-VM network devices connected to the virtual networks, such as load balancers, application gateways, and other network appliances.</p>
                $(ConvertTo-HTMLTable -Data $devices -TableId "deviceTable")
            </div>
            
            <!-- Subnet Analysis Table -->
            <div class="section">
                <h2>🔍 Subnet Analysis</h2>
                <p>Detailed analysis of each subnet showing connected resources and utilization.</p>
                $(ConvertTo-HTMLTable -Data $subnets -TableId "subnetTable")
            </div>
            
            <!-- Export Options -->
            <div class="button-container">
                <button class="export-btn" onclick="exportAllTables()">📥 Export All Data to Excel</button>
                <button class="export-btn" onclick="window.print()">🖨️ Print Report</button>
            </div>
        </div>
    </div>
    
    <!-- jQuery and DataTables JavaScript -->
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.4.2/js/dataTables.buttons.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.4.2/js/buttons.html5.min.js"></script>
    <script src="https://cdn.datatables.net/responsive/2.5.0/js/dataTables.responsive.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
    
    <script>
        // Initialize DataTables
        `$(document).ready(function() {
            // Common DataTable configuration
            const tableConfig = {
                responsive: true,
                pageLength: 25,
                lengthMenu: [[10, 25, 50, 100, -1], [10, 25, 50, 100, "All"]],
                dom: 'Bfrtip',
                buttons: [
                    'copy', 'excel', 'csv'
                ],
                columnDefs: [
                    {
                        targets: '_all',
                        render: function(data, type, row) {
                            if (type === 'display') {
                                if (data === 'Production') {
                                    return '<span class="workload-production">' + data + '</span>';
                                } else if (data === 'Non-Production') {
                                    return '<span class="workload-nonproduction">' + data + '</span>';
                                } else if (data === 'Unknown') {
                                    return '<span class="workload-unknown">' + data + '</span>';
                                }
                            }
                            return data;
                        }
                    }
                ]
            };
            
            // Initialize all tables
            `$('#subscriptionTable').DataTable({...tableConfig, pageLength: 10});
            `$('#vnetTable').DataTable(tableConfig);
            `$('#vmTable').DataTable(tableConfig);
            `$('#deviceTable').DataTable(tableConfig);
            `$('#subnetTable').DataTable(tableConfig);
        });
        
        // Charts
        const chartColors = {
            production: '#d32f2f',
            nonproduction: '#388e3c',
            unknown: '#f57c00'
        };
        
        // VNet Distribution Chart
        const vnetCtx = document.getElementById('vnetChart').getContext('2d');
        new Chart(vnetCtx, {
            type: 'doughnut',
            data: {
                labels: ['Production', 'Non-Production', 'Unknown'],
                datasets: [{
                    data: [$prodVNets, $nonProdVNets, $unknownVNets],
                    backgroundColor: [chartColors.production, chartColors.nonproduction, chartColors.unknown]
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });
        
        // VM Distribution Chart
        const vmCtx = document.getElementById('vmChart').getContext('2d');
        new Chart(vmCtx, {
            type: 'doughnut',
            data: {
                labels: ['Production', 'Non-Production', 'Unknown'],
                datasets: [{
                    data: [$prodVMs, $nonProdVMs, $unknownVMs],
                    backgroundColor: [chartColors.production, chartColors.nonproduction, chartColors.unknown]
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });
        
        // VM Size Chart
        const vmSizeCtx = document.getElementById('vmSizeChart').getContext('2d');
        new Chart(vmSizeCtx, {
            type: 'bar',
            data: {
                labels: [$(($vmSizeStats | Select-Object -First 10 | ForEach-Object { "'$($_.VMSize)'" }) -join ', ')],
                datasets: [{
                    label: 'VM Count',
                    data: [$(($vmSizeStats | Select-Object -First 10 | ForEach-Object { $_.Count }) -join ', ')],
                    backgroundColor: '#0078d4'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
        
        // OS Type Chart
        const osCtx = document.getElementById('osChart').getContext('2d');
        new Chart(osCtx, {
            type: 'pie',
            data: {
                labels: [$(($osTypeStats | ForEach-Object { "'$($_.OSType)'" }) -join ', ')],
                datasets: [{
                    data: [$(($osTypeStats | ForEach-Object { $_.Count }) -join ', ')],
                    backgroundColor: ['#0078d4', '#00bcf2', '#40e0d0', '#7b68ee', '#ff6347']
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });
        
        // Export function
        function exportAllTables() {
            // This would trigger exports from all DataTables
            `$('#subscriptionTable').DataTable().button(1).trigger();
        }
    </script>
</body>
</html>
"@

# Add System.Web for HTML encoding
Add-Type -AssemblyName System.Web

# Generate the HTML file
$reportPath = Join-Path $OutputPath "Azure-VNet-Analysis-Report-$timestamp.html"
$htmlContent | Out-File -FilePath $reportPath -Encoding UTF8

Write-Host "`n=== HTML REPORT GENERATED ===" -ForegroundColor Green
Write-Host "Report saved to: $reportPath" -ForegroundColor Cyan
Write-Host ""
Write-Host "Report includes:" -ForegroundColor Yellow
Write-Host "✅ Executive summary with key statistics" -ForegroundColor Green
Write-Host "✅ Migration planning recommendations" -ForegroundColor Green
Write-Host "✅ Interactive charts and visualizations" -ForegroundColor Green
Write-Host "✅ Searchable and sortable data tables" -ForegroundColor Green
Write-Host "✅ Export capabilities (Excel, CSV, Print)" -ForegroundColor Green
Write-Host "✅ Professional, responsive design" -ForegroundColor Green

# Open the report in default browser
if ($IsWindows -or $env:OS -eq "Windows_NT") {
    try {
        Start-Process $reportPath
        Write-Host "`nOpened report in default browser" -ForegroundColor Green
    } catch {
        Write-Host "`nTo view the report, open: $reportPath" -ForegroundColor Cyan
    }
} else {
    Write-Host "`nTo view the report, open: $reportPath" -ForegroundColor Cyan
}
